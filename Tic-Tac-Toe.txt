def print_board(board):
    print("\n")
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board, player):
    for row in board:
        if all([spot == player for spot in row]):
            return True
    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True
    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):
        return True
    return False

def check_tie(board):
    return all([spot != ' ' for row in board for spot in row])

def get_move(board, player):
    while True:
        move = input(f"Player {player}, enter your move (1-9) or 'q' to quit: ")
        if move.lower() == 'q':
            print("Game exited.")
            return 'quit'  # return special value to stop game
        try:
            move = int(move) - 1
            if 0 <= move <= 8 and board[move // 3][move % 3] == ' ':
                return move
            else:
                print("Invalid move, spot taken or out of range.")
        except (ValueError, IndexError):
            print("Invalid input. Enter 1â€“9 or 'q' to quit.")

def play_game():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'X'

    while True:
        print_board(board)
        move = get_move(board, current_player)

        if move == 'quit':
            break  # Exit the game loop completely

        board[move // 3][move % 3] = current_player

        if check_winner(board, current_player):
            print_board(board)
            print(f"Player {current_player} wins!")
            break  # Stop game after win

        if check_tie(board):
            print_board(board)
            print("It's a tie!")
            break  # Stop game after tie

        current_player = 'O' if current_player == 'X' else 'X'

# Run the game
play_game()
